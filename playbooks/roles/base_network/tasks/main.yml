---
- name: init iface map
  set_fact:
    interface_map: {}
- name: gather interface facts
  set_fact: # it's nasty here but should be easier elsewhere now
    interface_map: "{{ interface_map | combine({item.key: ansible_facts | dict2items | selectattr('value.ipv4', 'defined') | selectattr('value.ipv4.address', 'equalto', item.value | ansible.utils.ipaddr('address')) | map(attribute='key') | first }) }}"
  with_dict: "{{int_nets | combine(public_nets)}}"

- name: 'Autodetected interfaces:'
  debug:
    var: interface_map

# tasks file for firewall_router
# start service
- name: "Make sure firewalld is enabled and running"
  service:
    name: firewalld
    enabled: yes
    state: started

- name: make sure firewalld is using internal zones
  firewalld:
    zone: internal
    interface: "{{ interface_map[item.key] }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_dict: "{{ int_nets }}"

- name: make sure firewalld is using external zones
  firewalld:
    zone: external
    interface: "{{ interface_map[item.key] }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_dict: "{{ public_nets }}"

- name: Update Network Manager so settings persist after boot
  community.general.nmcli:
    type: ethernet
    conn_name: "System {{ interface_map[item.key] }}"
    ifname: "{{ interface_map[item.key] }}"
    dns4: "{{ groups['dns'] | map('extract',hostvars,'ip_for_dns') }}"
    ip4: "{{ item.value }}"
    zone: external
    state: present
  with_dict: "{{ public_nets }}"

- name: Update Network Manager so settings persist after boot
  community.general.nmcli:
    type: ethernet
    conn_name: "System {{ interface_map[item.key] }}"
    ifname: "{{ interface_map[item.key] }}"
    dns4: "{{ groups['dns'] | map('extract',hostvars,'ip_for_dns') }}"
    ip4: "{{ item.value }}"
    zone: internal
    state: present
  with_dict: "{{ int_nets }}"

# The following block is really nasty, but vagrant seems to have hardcoded into
# it something that adds the builtin DHCP server's DNS into the top of
# resolv.conf on boot, thus breaking local DNS - mattjs
- name: Make vagrant behave with dns
  block:
    - name: create service file to overwrite dns
      template:
        src: "vagrant_resolve.service.j2"
        dest: "/etc/systemd/system/vagrant_resolve.service"
        mode: '0751'
        group: root
        owner: root 
    - name: create script to overwrite dns (used by service file)
      template:
        src: "vagrant_resolve.sh.j2"
        dest: "/usr/sbin/vagrant_resolve.sh"
        mode: '0751'
        group: root
        owner: root 
    - name: create resolv reference file (used by service)
      template:
        src: "resolv.conf.override.j2"
        dest: "/etc/resolv.conf.override"
        mode: '0644'
        group: root
        owner: root 
    - name: enable service file to overwrite dns (dns host)
      service:
        name: vagrant_resolve.service
        enabled: yes
      when: ("dns" in group_names)
    - name: enable service file to overwrite dns (dns client)
      service:
        name: vagrant_resolve.service
        enabled: yes
        state: started
      when: ("dns" not in group_names)
  when: (vagrant is defined) and vagrant

- name: apply firewall rules
  include_tasks: outerLoop.yml
  loop: "{{firewall_rules | dict2items}}"
  loop_control: 
    loop_var: zone
  when: firewall_rules is defined